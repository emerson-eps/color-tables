{"version":3,"file":"DiscreteLegend-bca48293.js","sources":["../../src/component/Utils/discreteLegend.ts","../../src/component/Legend/DiscreteLegend.tsx"],"sourcesContent":["declare type ItemColor = {\n  color: any;\n};\n\nexport default function discreteLegendUtil(\n  itemColor: ItemColor[],\n  isSelectorLegend?: boolean,\n  horizontal?: any\n): any {\n  function legend(g: any) {\n    function drawLegend() {\n      // Code to fill the color\n      // Styling for color selector legend\n      g.selectAll(\"g.legendCells\")\n        .data(itemColor)\n        .enter()\n        .append(\"g\")\n        .append(\"rect\")\n        .append(\"title\")\n        .text(function (d: Record<string, unknown>) {\n          return d[\"name\"];\n        })\n        .attr(\"class\", \"rectLabel\")\n        .style(\"cursor\", \"pointer\")\n        .style(\"pointer-events\", \"all\");\n      g.selectAll(\"rect\")\n        .attr(\"height\", 1)\n        .attr(\"width\", 1)\n        .style(\"fill\", function (d: Record<string, unknown>) {\n          return d[\"color\"];\n        });\n      if (horizontal && !isSelectorLegend) {\n        g.selectAll(\"rect\")\n          .attr(\"x\", function (_d: number, i: number) {\n            return i;\n          })\n          .attr(\"y\", 0);\n      } else if (!horizontal && !isSelectorLegend) {\n        g.selectAll(\"rect\")\n          .attr(\"y\", function (_d: number, i: number) {\n            return i;\n          })\n          .attr(\"x\", 0);\n      } else if (horizontal === true && isSelectorLegend) {\n        g.selectAll(\"rect\")\n          .attr(\"x\", function (_d: number, i: number) {\n            return i;\n          })\n          .attr(\"y\", 0);\n      } else if (horizontal === false && isSelectorLegend) {\n        g.selectAll(\"rect\")\n          .attr(\"y\", function (_d: number, i: number) {\n            return i;\n          })\n          .attr(\"x\", 0);\n      } else {\n        g.selectAll(\"rect\")\n          .attr(\"x\", function (_d: number, i: number) {\n            return i;\n          })\n          .attr(\"y\", 0);\n      }\n    }\n\n    drawLegend();\n  }\n  return legend;\n}\n","import * as React from \"react\";\nimport { useRef } from \"react\";\nimport discreteLegendUtil from \"../Utils/discreteLegend\";\nimport { select } from \"d3\";\nimport { colorsArray, RGBToHex } from \"../Utils/legendCommonFunction\";\nimport { d3ColorScales } from \"../Utils/d3ColorScale\";\nimport { colorTablesArray } from \"../colorTableTypes\";\nimport defaultColorTables from \"../color-tables.json\";\n\ndeclare type ItemColor = {\n  color: string;\n  name?: string;\n};\n\ndeclare type discreteLegendProps = {\n  /**\n   * Discrete data to build legend\n   */\n  discreteData?: { objects: Record<string, [number[], number]> };\n  /**\n   * Title for the legend\n   */\n  dataObjectName?: string;\n  /**\n   * Name of the color(ex: Rainbow)\n   */\n  colorName?: string;\n  /**\n   * Orientation for legend\n   */\n  horizontal?: boolean | null;\n  /**\n   * Used while using color selector component\n   *\n   * Returns the object with name and array of colors\n   */\n  getColorScaleData?: any;\n  /**\n   * ID\n   */\n  id?: string;\n  /**\n   * Prop containing color table data\n   *\n   * Reference: https://github.com/emerson-eps/color-tables/blob/main/react-app/src/component/color-tables.json\n   */\n  colorTables?: colorTablesArray | string;\n  /**\n   * Font size of legend name (in px)\n   */\n  legendFontSize?: number;\n  /**\n   * Font size of legend ticks (in px)\n   */\n  tickFontSize?: number;\n  /**\n   * Number of ticks in the main legend (only shown when isRangeShown prop is true)\n   * This refers to the number between min and max range points\n   */\n  numberOfTicks?: number;\n  /**\n   * This prop controls the number of ticks shown on the scale of the color legend (in px)\n   */\n  legendScaleSize?: number;\n  /**\n   * css styles to be applied\n   */\n  cssLegendStyles?: any;\n};\n\nexport const DiscreteColorLegend: React.FC<discreteLegendProps> = ({\n  discreteData,\n  dataObjectName,\n  colorName = \"Stratigraphy\",\n  horizontal,\n  getColorScaleData,\n  id,\n  colorTables = defaultColorTables as colorTablesArray,\n  legendFontSize,\n  tickFontSize,\n  numberOfTicks,\n  legendScaleSize = 200,\n  cssLegendStyles = { left: \"0vw\", top: \"0vh\" },\n}: discreteLegendProps) => {\n  const generateUniqueId = Math.ceil(Math.random() * 9999).toString();\n  const divRef = useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    if (divRef.current) {\n      select(divRef.current).select(\"div\").remove();\n      select(divRef.current).select(\"svg\").remove();\n      discreteLegend();\n    }\n\n    async function discreteLegend() {\n      let dataSet;\n      let useSelectorLegend = false;\n      let itemName: string[] = [];\n      const itemColor: ItemColor[] = [];\n      try {\n        // fix for dash wrapper\n        if (typeof colorTables === \"string\") {\n          const res = await fetch(colorTables);\n          dataSet = await res.json();\n        }\n\n        const arrayOfColors =\n          typeof colorTables === \"string\"\n            ? colorsArray(colorName, dataSet)\n            : colorsArray(colorName, colorTables);\n\n        const d3ColorArrays = colorsArray(colorName, d3ColorScales);\n\n        // temporary fix, will be removed later\n        const defaultDiscreteData: any = {\n          discrete_1: [[], 0],\n          discrete_2: [[], 1],\n          discrete_3: [[], 2],\n          discrete_4: [[], 3],\n          discrete_5: [[], 4],\n          discrete_6: [[], 5],\n          discrete_7: [[], 6],\n          discrete_8: [[], 7],\n          discrete_9: [[], 8],\n          discrete_10: [[], 9],\n        };\n\n        // Main single discrete legend\n        if (!getColorScaleData || getColorScaleData.length === 0) {\n          const entries = Object.entries(\n            discreteData ? discreteData : defaultDiscreteData\n          );\n          const sorted = entries.sort((a: any, b: any) => a[1][1] - b[1][1]);\n          sorted.forEach(value => {\n            const key = value[0];\n            const val = value[1];\n            const code = val[1];\n            // for colortable colors\n            if (arrayOfColors.length > 0) {\n              //compare the first value in colorarray(colortable) and code from discreteData\n              const matchedColorsArrays = arrayOfColors.find(\n                (value: [number[], number][]) => {\n                  return value[0] === code;\n                }\n              );\n              if (matchedColorsArrays)\n                itemColor.push({\n                  color: RGBToHex(matchedColorsArrays).color,\n                  name: key,\n                });\n              itemName.push(key);\n            }\n            // for d3 colors\n            else {\n              var matchedColorsArrays = d3ColorArrays.find(\n                (_value: number, index: [number[], number]) => {\n                  return index === code;\n                }\n              );\n              if (matchedColorsArrays)\n                itemColor.push({ color: matchedColorsArrays });\n            }\n          });\n          useSelectorLegend = false;\n        }\n        // Discrete legend using Colortable colors (color selector component)\n        if (getColorScaleData?.color) {\n          getColorScaleData.color.forEach((key: any) => {\n            itemColor.push({ color: RGBToHex(key).color });\n          });\n\n          useSelectorLegend = true;\n        }\n        // Discrete legend using d3 colors\n        if (getColorScaleData?.colorsObject) {\n          getColorScaleData.colorsObject.forEach((key: any) => {\n            itemColor.push({ color: key });\n          });\n\n          itemName = getColorScaleData.legendColorName;\n          useSelectorLegend = true;\n        }\n\n        const colorLegend = discreteLegendUtil(\n          itemColor,\n          useSelectorLegend,\n          horizontal\n        );\n        let totalRect;\n\n        // Style for main horizontal legend\n        if (!useSelectorLegend) {\n          totalRect = itemColor.length;\n        }\n        // Style for color selector legend\n        else {\n          // calculate width for legend using colortable colors\n          if (getColorScaleData?.color) {\n            totalRect = getColorScaleData.color.length;\n          }\n          // calculate width for legend using d3 colors\n          else {\n            totalRect = getColorScaleData.colorsObject.length;\n          }\n        }\n\n        const currentDiv = select(divRef.current);\n\n        // append the title\n        currentDiv\n          .append(\"div\")\n          .text(dataObjectName)\n          .style(\"color\", \"grey\")\n          .style(\"white-space\", \"nowrap\")\n          .style(\"overflow\", \"hidden\")\n          .style(\"width\", \"150px\")\n          .style(\"text-overflow\", \"ellipsis\")\n          .style(\"margin-bottom\", horizontal ? \"5px\" : \"0px\")\n          .style(\n            \"font-size\",\n            legendFontSize && legendFontSize > 0\n              ? `${legendFontSize}px`\n              : \"16px\"\n          )\n          .style(\n            \"transform\",\n            horizontal ? \"none\" : \"translate(-69px, 80px) rotate(270deg)\"\n          );\n\n        // Append svg to the div\n        const svgLegend = currentDiv\n          .style(\"margin\", horizontal ? \"5px 0px 0px 15px\" : \"0px 5px 0px 5px\")\n          // .style(\"width\", horizontal ? \"145px\" : \"50px\")\n          .style(\n            \"width\",\n            horizontal\n              ? legendScaleSize < 200\n                ? 200\n                : legendScaleSize\n              : \"50px\"\n          )\n          .append(\"svg\")\n          .call(colorLegend);\n\n        svgLegend\n          .attr(\n            \"viewBox\",\n            horizontal ? `0 0 ${totalRect} 1.5` : `0 0 2 ${totalRect}`\n          )\n          .attr(\"preserveAspectRatio\", \"none\")\n          .style(\"font-size\", \".4\")\n          .style(\"margin-left\", horizontal ? \"0\" : \"20px\")\n          // .attr(\"height\", horizontal ? \"30px\" : \"153px\")\n          .attr(\n            \"height\",\n            horizontal\n              ? \"30px\"\n              : legendScaleSize < 200\n              ? 190\n              : legendScaleSize - 10\n          )\n          // .attr(\"width\", horizontal ? \"150px\" : \"40px\");\n          .attr(\n            \"width\",\n            horizontal\n              ? legendScaleSize < 200\n                ? 190\n                : legendScaleSize - 10\n              : \"40px\"\n          );\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }, [\n    discreteData,\n    colorName,\n    colorTables,\n    horizontal,\n    getColorScaleData,\n    dataObjectName,\n    legendFontSize,\n    tickFontSize,\n    numberOfTicks,\n    legendScaleSize,\n  ]);\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        minHeight: \"70px\",\n        backgroundColor: \"#ffffffcc\",\n        borderRadius: \"5px\",\n        zIndex: 999,\n        margin: \"10px\",\n        ...cssLegendStyles,\n      }}\n    >\n      <div\n        id={id ? id : `disc-legend - ${generateUniqueId}`}\n        ref={divRef}\n      ></div>\n    </div>\n  );\n};\n"],"names":["discreteLegendUtil","itemColor","isSelectorLegend","horizontal","legend","g","drawLegend","d","_d","i","DiscreteColorLegend","discreteData","dataObjectName","colorName","getColorScaleData","id","colorTables","defaultColorTables","legendFontSize","tickFontSize","numberOfTicks","legendScaleSize","cssLegendStyles","generateUniqueId","divRef","useRef","React.useEffect","select","discreteLegend","dataSet","useSelectorLegend","itemName","arrayOfColors","colorsArray","d3ColorArrays","d3ColorScales","defaultDiscreteData","a","b","value","key","code","matchedColorsArrays2","value2","RGBToHex","matchedColorsArrays","_value","index","colorLegend","totalRect","currentDiv","error","jsx"],"mappings":"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"}