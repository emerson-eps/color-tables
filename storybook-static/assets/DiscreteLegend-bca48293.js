import{j as V}from"./jsx-runtime-ad672792.js";import{r as j}from"./index-f1f749bf.js";import{s as g,m as v,f as H,R as L,b as M}from"./legendCommonFunction-691e4b35.js";function G(o,i,s){function n(e){function f(){e.selectAll("g.legendCells").data(o).enter().append("g").append("rect").append("title").text(function(t){return t.name}).attr("class","rectLabel").style("cursor","pointer").style("pointer-events","all"),e.selectAll("rect").attr("height",1).attr("width",1).style("fill",function(t){return t.color}),s&&!i?e.selectAll("rect").attr("x",function(t,r){return r}).attr("y",0):!s&&!i?e.selectAll("rect").attr("y",function(t,r){return r}).attr("x",0):s===!0&&i?e.selectAll("rect").attr("x",function(t,r){return r}).attr("y",0):s===!1&&i?e.selectAll("rect").attr("y",function(t,r){return r}).attr("x",0):e.selectAll("rect").attr("x",function(t,r){return r}).attr("y",0)}f()}return n}const k=({discreteData:o,dataObjectName:i,colorName:s="Stratigraphy",horizontal:n,getColorScaleData:e,id:f,colorTables:t=M,legendFontSize:r,tickFontSize:O,numberOfTicks:T,legendScaleSize:l=200,cssLegendStyles:N={left:"0vw",top:"0vh"}})=>{const E=Math.ceil(Math.random()*9999).toString(),a=j.useRef(null);return j.useEffect(()=>{a.current&&(g(a.current).select("div").remove(),g(a.current).select("svg").remove(),I());async function I(){let _,d=!1,w=[];const c=[];try{typeof t=="string"&&(_=await(await fetch(t)).json());const m=typeof t=="string"?v(s,_):v(s,t),F=v(s,H),U={discrete_1:[[],0],discrete_2:[[],1],discrete_3:[[],2],discrete_4:[[],3],discrete_5:[[],4],discrete_6:[[],5],discrete_7:[[],6],discrete_8:[[],7],discrete_9:[[],8],discrete_10:[[],9]};(!e||e.length===0)&&(Object.entries(o||U).sort((y,h)=>y[1][1]-h[1][1]).forEach(y=>{const h=y[0],A=y[1][1];if(m.length>0){const x=m.find(b=>b[0]===A);x&&c.push({color:L(x).color,name:h}),w.push(h)}else{var R=F.find((x,b)=>b===A);R&&c.push({color:R})}}),d=!1),e!=null&&e.color&&(e.color.forEach(p=>{c.push({color:L(p).color})}),d=!0),e!=null&&e.colorsObject&&(e.colorsObject.forEach(p=>{c.push({color:p})}),w=e.legendColorName,d=!0);const B=G(c,d,n);let u;d?e!=null&&e.color?u=e.color.length:u=e.colorsObject.length:u=c.length;const q=g(a.current);q.append("div").text(i).style("color","grey").style("white-space","nowrap").style("overflow","hidden").style("width","150px").style("text-overflow","ellipsis").style("margin-bottom",n?"5px":"0px").style("font-size",r&&r>0?`${r}px`:"16px").style("transform",n?"none":"translate(-69px, 80px) rotate(270deg)"),q.style("margin",n?"5px 0px 0px 15px":"0px 5px 0px 5px").style("width",n?l<200?200:l:"50px").append("svg").call(B).attr("viewBox",n?`0 0 ${u} 1.5`:`0 0 2 ${u}`).attr("preserveAspectRatio","none").style("font-size",".4").style("margin-left",n?"0":"20px").attr("height",n?"30px":l<200?190:l-10).attr("width",n?l<200?190:l-10:"40px")}catch(m){console.error(m)}}},[o,s,t,n,e,i,r,O,T,l]),V("div",{style:{position:"absolute",minHeight:"70px",backgroundColor:"#ffffffcc",borderRadius:"5px",zIndex:999,margin:"10px",...N},children:V("div",{id:f||`disc-legend - ${E}`,ref:a})})};try{k.displayName="DiscreteColorLegend",k.__docgenInfo={description:"",displayName:"DiscreteColorLegend",props:{discreteData:{defaultValue:null,description:"Discrete data to build legend",name:"discreteData",required:!1,type:{name:"{ objects: Record<string, [number[], number]>; }"}},dataObjectName:{defaultValue:null,description:"Title for the legend",name:"dataObjectName",required:!1,type:{name:"string"}},colorName:{defaultValue:{value:"Stratigraphy"},description:"Name of the color(ex: Rainbow)",name:"colorName",required:!1,type:{name:"string"}},horizontal:{defaultValue:null,description:"Orientation for legend",name:"horizontal",required:!1,type:{name:"boolean"}},getColorScaleData:{defaultValue:null,description:`Used while using color selector component

Returns the object with name and array of colors`,name:"getColorScaleData",required:!1,type:{name:"any"}},id:{defaultValue:null,description:"ID",name:"id",required:!1,type:{name:"string"}},colorTables:{defaultValue:{value:"defaultColorTables as colorTablesArray"},description:`Prop containing color table data

Reference: https://github.com/emerson-eps/color-tables/blob/main/react-app/src/component/color-tables.json`,name:"colorTables",required:!1,type:{name:"string | colorTablesArray"}},legendFontSize:{defaultValue:null,description:"Font size of legend name (in px)",name:"legendFontSize",required:!1,type:{name:"number"}},tickFontSize:{defaultValue:null,description:"Font size of legend ticks (in px)",name:"tickFontSize",required:!1,type:{name:"number"}},numberOfTicks:{defaultValue:null,description:`Number of ticks in the main legend (only shown when isRangeShown prop is true)
This refers to the number between min and max range points`,name:"numberOfTicks",required:!1,type:{name:"number"}},legendScaleSize:{defaultValue:{value:"200"},description:"This prop controls the number of ticks shown on the scale of the color legend (in px)",name:"legendScaleSize",required:!1,type:{name:"number"}},cssLegendStyles:{defaultValue:{value:'{ left: "0vw", top: "0vh" }'},description:"css styles to be applied",name:"cssLegendStyles",required:!1,type:{name:"any"}}}}}catch{}export{k as D,G as d};
//# sourceMappingURL=DiscreteLegend-bca48293.js.map
