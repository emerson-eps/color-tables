import{j as R}from"./jsx-runtime-095bf462.js";import{r as j}from"./index-8db94870.js";import{s as v,d as w,e as P,R as L,b as W}from"./legendCommonFunction-03fb4e75.js";function J(l,i,s){function r(e){function y(){e.selectAll("g.legendCells").data(l).enter().append("g").append("rect").append("title").text(function(t){return t.name}).attr("class","rectLabel").style("cursor","pointer").style("pointer-events","all"),e.selectAll("rect").attr("height",1).attr("width",1).style("fill",function(t){return t.color}),s&&!i||s===!0&&i?e.selectAll("rect").attr("x",function(t,n){return n}).attr("y",0):!s&&!i||s===!1&&i?e.selectAll("rect").attr("y",function(t,n){return n}).attr("x",0):e.selectAll("rect").attr("x",function(t,n){return n}).attr("y",0)}y()}return r}const O=({discreteData:l,dataObjectName:i,colorName:s="Stratigraphy",horizontal:r,getColorScaleData:e,id:y,colorTables:t=W,legendFontSize:n,tickFontSize:T,numberOfTicks:N,legendScaleSize:o=200,forceDarkMode:E,cssLegendStyles:M={left:"0vw",top:"0vh"}})=>{const F=Math.ceil(Math.random()*9999).toString(),a=j.useRef(null);let d,u;return r?(u="30px",o<200?d=200:d=o):(d="50px",o<200?u=190:u=o-10),j.useEffect(()=>{a.current&&(v(a.current).select("div").remove(),v(a.current).select("svg").remove(),I());async function I(){let _,h=!1,q=[];const c=[];try{typeof t=="string"&&(_=await(await fetch(t)).json());const b=typeof t=="string"?w(s,_):w(s,t),H=w(s,P),U={discrete_1:[[],0],discrete_2:[[],1],discrete_3:[[],2],discrete_4:[[],3],discrete_5:[[],4],discrete_6:[[],5],discrete_7:[[],6],discrete_8:[[],7],discrete_9:[[],8],discrete_10:[[],9]};(!e||e.length===0)&&Object.entries(l||U).sort((x,g)=>x[1][1]-g[1][1]).forEach(x=>{const g=x[0],k=x[1][1];if(b.length>0){const m=b.find(A=>A[0]===k);m&&c.push({color:L(m).color,name:g}),q.push(g)}else{const m=H.find((A,G)=>G===k);m&&c.push({color:m})}}),e!=null&&e.color&&(e.color.forEach(f=>{c.push({color:L(f).color})}),h=!0),e!=null&&e.colorsObject&&(e.colorsObject.forEach(f=>{c.push({color:f})}),q=e.legendColorName,h=!0);const B=J(c,h,r);let p;h?e!=null&&e.color?p=e.color.length:p=e.colorsObject.length:p=c.length;const V=v(a.current);V.append("div").text(i).style("color","grey").style("white-space","nowrap").style("overflow","hidden").style("width","150px").style("text-overflow","ellipsis").style("margin-bottom",r?"5px":"0px").style("font-size",n&&n>0?`${n}px`:"16px").style("transform",r?"none":"translate(-69px, 80px) rotate(270deg)"),V.style("margin",r?"5px 0px 0px 15px":"0px 5px 0px 5px").style("width",d).append("svg").call(B).attr("viewBox",r?`0 0 ${p} 1.5`:`0 0 2 ${p}`).attr("preserveAspectRatio","none").style("font-size",".4").style("margin-left",r?"0":"20px").attr("height",u).attr("width",r?o<200?190:o-10:"40px")}catch(b){console.error(b)}}},[l,s,t,r,e,i,n,T,N,o,d,u]),R("div",{style:{position:"absolute",minHeight:"70px",backgroundColor:E?"#000000cc":"#ffffffcc",borderRadius:"5px",zIndex:999,margin:"10px",...M},children:R("div",{id:y||`disc-legend - ${F}`,ref:a})})};try{O.displayName="DiscreteColorLegend",O.__docgenInfo={description:"",displayName:"DiscreteColorLegend",props:{discreteData:{defaultValue:null,description:"Discrete data to build legend",name:"discreteData",required:!1,type:{name:"{ objects: Record<string, [number[], number]>; }"}},dataObjectName:{defaultValue:null,description:"Title for the legend",name:"dataObjectName",required:!1,type:{name:"string"}},colorName:{defaultValue:{value:"Stratigraphy"},description:"Name of the color(ex: Rainbow)",name:"colorName",required:!1,type:{name:"string"}},horizontal:{defaultValue:null,description:"Orientation for legend",name:"horizontal",required:!1,type:{name:"boolean"}},getColorScaleData:{defaultValue:null,description:`Used while using color selector component

Returns the object with name and array of colors`,name:"getColorScaleData",required:!1,type:{name:"any"}},id:{defaultValue:null,description:"ID",name:"id",required:!1,type:{name:"string"}},colorTables:{defaultValue:{value:"defaultColorTables as colorTablesArray"},description:`Prop containing color table data

Reference: https://github.com/emerson-eps/color-tables/blob/main/react-app/src/component/color-tables.json`,name:"colorTables",required:!1,type:{name:"string | colorTablesArray"}},legendFontSize:{defaultValue:null,description:"Font size of legend name (in px)",name:"legendFontSize",required:!1,type:{name:"number"}},tickFontSize:{defaultValue:null,description:"Font size of legend ticks (in px)",name:"tickFontSize",required:!1,type:{name:"number"}},numberOfTicks:{defaultValue:null,description:`Number of ticks in the main legend (only shown when isRangeShown prop is true)
This refers to the number between min and max range points`,name:"numberOfTicks",required:!1,type:{name:"number"}},legendScaleSize:{defaultValue:{value:"200"},description:"This prop controls the number of ticks shown on the scale of the color legend (in px)",name:"legendScaleSize",required:!1,type:{name:"number"}},forceDarkMode:{defaultValue:null,description:"Forces darkMode if true",name:"forceDarkMode",required:!1,type:{name:"boolean"}},cssLegendStyles:{defaultValue:{value:'{ left: "0vw", top: "0vh" }'},description:"css styles to be applied",name:"cssLegendStyles",required:!1,type:{name:"any"}}}}}catch{}export{O as D,J as d};
//# sourceMappingURL=DiscreteLegend-240c627a.js.map
